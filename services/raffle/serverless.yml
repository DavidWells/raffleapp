service: netlify-conference-raffles

plugins:
  - serverless-python-requirements
  # - serverless-domain-manager

custom:
  # default prod stage
  stage: ${opt:stage, 'prod'}
  # default region
  region: ${opt:region, 'us-west-1'}
  # default aws profile name
  profile: ${opt:profile, 'netlify'}
  # netlify service url
  domainName: netlify-services.com
  # Table names
  rafflesTable: netlify-conference-raffles-${self:custom.stage}-raffles
  entriesTable: netlify-conference-raffles-${self:custom.stage}-entries

  pythonRequirements:
    dockerizePip: true
  # customDomain:
  #   domainName: 'raffle.serverlessteam.com'
  #   basePath: ''
  #   stage: ${self:provider.stage}
  #   createRoute53Record: true

provider:
  name: aws
  runtime: python3.6
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["RafflesDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["EntriesDynamoDBTable", "Arn" ] }

  environment:
    RAFFLE_TABLE: { "Ref": "RafflesDynamoDBTable" }
    ENTRY_TABLE: { "Ref": "EntriesDynamoDBTable" }

functions:
  create:
    handler: handlers/create.handler
    events:
      - http:
          path: /create
          method: post
          cors: true
  listRaffles:
    handler: handlers/list_raffles.handler
    events:
      - http:
          path: /
          method: get
          cors: true
  getRaffle:
    handler: handlers/get_raffle.handler
    events:
      - http:
          path: /{shortcode}
          method: get
          request:
            parameters:
              paths:
                shortcode: true
          cors: true
  setWinner:
    handler: handlers/set_winner.handler
    events:
      - http:
          path: /{shortcode}
          method: post
          request:
            parameters:
              paths:
                shortcode: true
          cors: true

# public APIs
  register:
    handler: handlers/register.handler
    events:
      - http:
          path: /{shortcode}/register
          method: post
          request:
            parameters:
              paths:
                shortcode: true
          cors: true

resources:
  Resources:
    RafflesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.rafflesTable}
        AttributeDefinitions:
          -
            AttributeName: shortcode
            AttributeType: S
        KeySchema:
          -
            AttributeName: shortcode
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    EntriesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.entriesTable}
        AttributeDefinitions:
          -
            AttributeName: shortcode
            AttributeType: S
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: shortcode
            KeyType: HASH
          -
            AttributeName: email
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
